<?xml version="1.0" encoding="UTF-8"?>

<project name="phing-drupal" default="build" phingVersion="2.4.11">

    <taskdef name="jshint" classname="JSHintTask" />
    <taskdef name="csslint" classname="CSSLintTask" />
    <taskdef name="drush" classname="DrushTask" />

  <target name="build" depends="init,
                                clean,
                                verify,
                                analyze" />

  <target name="verify" depends="init,
                                 clean,
                                 lint-php-custom,
                                 lint-js-custom,
                                 simpletest"/>

  <target name="analyze" depends="init,
                                  clean,
                                  phploc,
                                  phpmd,
                                  phpcpd,
                                  phpcs-cli">
    <!-- Moved inside target to support properties in target name -->
    <phingcall target="coder-review-d${drupal.version}">
      <!-- Run the target as if it was executed from the Drupal root
           directory. -->
      <property name="project.basedir" value="${project.drupal.dir}"/>
      <!-- We already have a clean environment so avoid further cleaning. -->
      <property name="project.cleaned" value="1"/>
      <!-- Make will run again as a part of the `init` target. We already have
           a working site so skip that. -->
      <property name="project.make.skip" value="1"/>
    </phingcall>
  </target>

<!-- ### PHP linting -->

  <target name="lint-php-custom"
          description="Check custom PHP files for syntax errors using PHPLint"
          depends="init">
    <phplint haltonfailure="true">
      <fileset refid="src.php.custom" />
    </phplint>
  </target>


<!-- ### JS linting with jshint -->
    <target name="lint-js-custom"
            description="Check js file against jshint"
            depends="init, clean, list-js-custom">
        <jshint source="${project.logdir}/${jslist.outfile}" output="${project.logdir}/${jshint.outfile}" />
    </target>


<!-- ### CSS linting with csslint -->
    <target name="lint-css-custom"
            description="Check css file agains csslint"
            depends="init, clean, list-css-custom">
        <csslint source="${project.logdir}/${csslist.outfile}" output="${project.logdir}/${csslint.outfile}" />
    </target>



<!-- List individual lines inside fileset -->
     <target name="list-js-custom" depends="init">
        <property name="fileset-dump-file" value="${project.logdir}/${jslist.outfile}" override="true" />
        <delete file="${fileset-dump-file}" />
        <foreach target="write-to-file" param="filename" absparam="absfilename">
            <fileset refid="src.js.custom" />
        </foreach>
    </target>

    <target name="list-css-custom" depends="init">
        <property name="fileset-dump-file" value="${project.logdir}/${csslist.outfile}" override="true" />
        <delete file="${fileset-dump-file}" />
        <foreach target="write-to-file" param="filename" absparam="absfilename">
            <fileset refid="src.css.custom" />
        </foreach>
    </target>

    <target name="write-to-file">
        <echo file="${fileset-dump-file}" append="true">${absfilename}${line.separator}</echo>
    </target>



  <target name="check-php-debug"
          description="Check custom PHP code for debug statements"
          depends="init">
    <phingcall target="check-debug">
      <property name="debug.language" value="PHP" override="true" />
      <property name="debug.pattern" value="(var_dump\(|dsm\(|dpm\()"
                override="true" />
      <property name="debug.fileset" value="src.php.custom"/>
    </phingcall>
  </target>

  <target name="check-js-debug"
          description="Check custom Javascript code for debug statements">
    <phingcall target="check-debug">
      <property name="debug.language" value="Javascript" override="true" />
      <property name="debug.pattern" value="(console\.log\()" override="true" />
      <property name="debug.fileset" value="src.js.custom"/>
    </phingcall>
  </target>

  <!-- #### Check a fileset for debug code -->
  <target name="check-debug"
          depends="init">
    <php function="strtolower" returnProperty="debug.language.lower">
      <param value="${debug.language}" />
    </php>
    <property name="debug.output"
              value="${project.logdir}/debug_${debug.language.lower}.txt"
              override="true" />
    <delete file="${debug.output}"/>
    <append text="" destFile="${debug.output}" />

    <foreach target="check-debug-file" param="filename"
             absparam="absfilename">
      <fileset refid="${debug.fileset}"/>
    </foreach>

    <loadfile property="debug.lines" file="${debug.output}" />
    <!-- Break if debug code is detected! -->
    <if>
      <not>
        <equals arg1="${debug.lines}" arg2="${debug.lines}" />
      </not>
      <then>
        <fail message="${debug.language} debug code detected:${line.separator}
                       ${debug.lines}" />
      </then>
    </if>
  </target>

<!-- #### Check an individual file for debug code

No need to run `init` here. This target should only be called through parent
`check-debug` target. -->
  <target name="check-debug-file">
    <echo>Checking file for debug statements: ${absfilename}</echo>
    <loadfile property="debug.lines" file="${absfilename}">
      <filterchain>
        <linecontainsregexp>
            <regexp pattern="${debug.pattern}" />
          </linecontainsregexp>
      </filterchain>
    </loadfile>
    <if>
      <not>
        <equals arg1="${debug.lines}" arg2="" />
      </not>
      <then>
        <append text="${filename}:${line.separator}
                      ${debug.lines}${line.separator}
                      ${line.separator}"
                destFile="${debug.output}"/>
      </then>
    </if>
  </target>

<!-- ### Detect code mess

Uses [PHPMD](http://phpmd.org/) to detect code mess and look for potential
problems. -->
  <target name="phpmd"
          description="Generate pmd.xml using PHPMD"
          depends="init">
    <!-- We do not use the unusedcode ruleset as Drupal hook implementations
         usually are declared with all arguements but may not use them
         all. -->
    <phpmd rulesets="codesize,naming,design">
      <fileset refid="src.php.custom" />
      <formatter type="xml" outfile="${project.logdir}/pmd.xml"/>
    </phpmd>
  </target>

<!-- ### Detect potential copy/pasting

Uses [phpcpd](https://github.com/sebastianbergmann/phpcpd) to detect duplicate
code. This indicates potential refactorings.-->
  <target name="phpcpd"
          description="Generate pmd-cpd.xml using phpcpd"
          depends="init">
    <phpcpd>
      <fileset refid="src.php.custom" />
      <formatter type="pmd" outfile="${project.logdir}/pmd-cpd.xml"/>
    </phpcpd>
  </target>

<!-- ### Generate code statistics

Measures the size of the project using
[phploc](http://sebastianbergmann.github.com/phploc/) and generates
statistics. -->
  <target name="phploc"
          description="Generate phploc.csv using phploc"
          depends="init">
    <!-- Suffixes should be the same as included in the
         src.php filesets -->
    <phploc reportType="csv"
            reportName="phploc" reportDirectory="${project.logdir}"
            suffixes="php,module,inc,install,profile,test" countTests="true">
      <fileset refid="src.php.custom" />
    </phploc>
  </target>

<!-- ### Drupal Coder review

Review code using [Drupal coder module](http://drupal.org/project/coder).

Configuration of which modules and themes to review is done in
`build.properties`. If your modules use a common prefix such as
`yourproject_module1`, `yourproject_module2` you can add all modules with a
specific prefix. -->

  <target name="coder-review-d7"
          description="Review code using Drupal 7 Coder module"
          depends="init, clean, site-install">
    <!-- Setup properties for running Coder Review.
         For some reason these properties are not passed correctly through to
         subtargets when defining them within the phingcall. -->
    <property name="coder.review.command" value="coder-review"/>

    <!-- Download and enable the Coder Review module -->
    <phingcall target="enable-module">
      <property name="project" value="coder"/>
      <property name="project.version" value="7.x-1.0"/>
      <property name="module" value="coder_review"/>
    </phingcall>

    <!-- Perform actual coder review for each style -->
    <foreach target="coder-review" param="coder.review.type"
             list="comment,i18n,security,sql" />
  </target>

<!-- #### Perform coder review

This target requires properties set by calling targets coder-review-d6 or
coder-review-d7.

No need to run `init` here. This target should only be called from parent
`coder-review-*` targets. -->
  <target name="coder-review">
    <!-- Get a list of modules and themes matching the project prefix.
         These are the ones we are going to review. -->
    <drush command="pm-list" pipe="true" returnProperty="projects" />
    <!-- The project list is piped through a file as this seems to be
         the only way to handle filtering of values in Phing. -->
    <delete file="${project.logdir}/projects.txt" />
    <append text="${projects}" destFile="${project.logdir}/projects.txt" />

    <!-- Build a regular expression to match modules based on the
         set properties. The propery can contain prefixes separated by comma
         and/or spaces. The expression should be in the format
         `^(prefix1|prefix2|prefix3)_`. -->
    <php expression="'^(' . preg_replace('/(\s+|\s*,\s*)/', '|', '${project.code.prefix}') .')_'"
         returnProperty="project.code.prefix.regex"/>

    <loadfile property="project.code.projects"
              file="${project.logdir}/projects.txt">
      <filterchain>
        <linecontainsregexp>
          <regexp pattern="${project.code.prefix.regex}" />
        </linecontainsregexp>
        <!-- Prefix all lines with a space.
             We need the space as separator when we strip line breaks -->
        <prefixlines prefix=" " />
        <striplinebreaks />
      </filterchain>
    </loadfile>

    <!-- Cleanup the custom code property. Commas and multiple whitespace
         characters are reduced to a single space. -->
    <php expression="preg_replace('/(\s+|\s*,\s*)/', ' ', '${project.code.custom}')"
         returnProperty="project.code.custom"/>

    <!-- Execute coder review and output results in XML format-->
    <drush command="${coder.review.command}" assume="yes"
           pipe="yes" returnProperty="xml">
      <param>no-empty</param>
      <param>checkstyle</param>
      <param>minor</param>
      <param>${coder.review.type}</param>
      <!-- Review all the modules and themes matching the project prefix -->
      <param>${project.code.projects}</param>
      <!-- Review additional modules which do not match the prefix -->
      <param>${project.code.custom}</param>
    </drush>

    <!-- Write XML output to file -->
    <property name="coderreview.checkstyle.file"
              value="${project.logdir}/checkstyle-${coder.review.type}.xml" />
    <delete file="${coderreview.checkstyle.file}" />
    <append destFile="${coderreview.checkstyle.file}" text="${xml}" />

    <!-- Convert source from source extract to Category.Type format -->
    <php function="ucwords" returnProperty="type">
      <param value="${coder.review.type}"/>
    </php>
    <reflexive file="${coderreview.checkstyle.file}">
      <filterchain>
        <replaceregexp>
          <regexp pattern='source=".*"'
                  replace='source="Drupal.CoderReview.${type}"' />
        </replaceregexp>
      </filterchain>
    </reflexive>
  </target>

    <target name="phpcs-cli"
            description="Generate checkstyle.xml using PHP_CodeSniffer"
            depends="init, clean">
        <phpcodesniffer standard="${project.builddir}/drupalcs/ruleset.xml"
                        showSniffs="true"
                        ignorePatterns="*/contrib/*,*/*.features.*,*/*.field_group.inc,*/*.layout.*,*/*.pages_default.*,*/*.panels_default.*,*/*strongarm.inc,*/*.views_default.inc"
                        showWarnings="true">
            <fileset refid="src.php.custom" />
            <formatter type="checkstyle" outfile="${project.logdir}/checkstyle-codesniffer.xml" />
        </phpcodesniffer>
    </target>

  <!-- ### Run simpletests

Execution of this target can be skipped by setting the
 `project.simpletest.skip` property from the command line or in other targets.
-->
  <target name="simpletest"
          description="Run all unit tests"
          depends="init, site-install"
          unless="project.simpletest.skip">
    <!-- Enable simpletest module. If using Drupal 6 the module will be
         downloaded as well. -->
    <phingcall target="enable-module">
      <property name="module" value="simpletest"/>
    </phingcall>

    <if>
      <isset property="drupal.uri" />
      <then>

        <!-- Get a list of all available test cases -->
        <drush command="test-run" uri="${drupal.uri}" root="${project.drupal.dir}" returnProperty="tests" returnGlue="${line.separator}"/>

        <!-- The project list is piped through a file as this seems to be
             the only way to handle filtering of values in Phing. -->
        <delete file="${project.logdir}/tests.txt" />
        <append text="${tests}" destFile="${project.logdir}/tests.txt" />

        <!-- Build a regular expression to match test groups based on the
             set properties. The expression should be in the format
             `^\s?(prefix1|prefix2|prefix3)_`. -->
        <php expression="'^\s?(' . preg_replace('/(\s+|\s*,\s*)/', '|', '${project.code.prefix}') .').*'"
             returnProperty="project.code.prefix.regex"/>

        <!-- Load the list of tests but keep only the test groups matching our
             prefixes. -->
        <loadfile property="project.simpletest.tests"
                  file="${project.logdir}/tests.txt">
          <filterchain>
            <linecontainsregexp>
              <regexp pattern="${project.code.prefix.regex}" ignoreCase="true"/>
            </linecontainsregexp>
          </filterchain>
        </loadfile>

        <!-- Transform the list of filtered test groups in the form

        Groupname 1             Groupname 1
        Groupname 2             Groupname 2

        into a list of comma separated unique group names `Groupname 1,Groupname 2`. -->
        <php expression="implode(',', array_unique(preg_split('/(\s{2,}|\r|\n)/', trim('${project.simpletest.tests}', PREG_SPLIT_NO_EMPTY))))"
             returnProperty="project.simpletest.tests"/>

        <!-- Run the tests and generate JUnit XML reports. This requires
             Drush 4.5 or newer or [a patch](http://drupal.org/node/1109408). -->
        <drush command="test-run" uri="${drupal.uri}" root="${project.drupal.dir}" haltonerror="false">
          <param>${project.simpletest.tests}</param>
          <option name="xml">${project.testdir}</option>
          </drush>
      </then>
      <else>
        <echo msg="You must set the drupal.uri property to get simpletests working." />
      </else>
    </if>
    
  </target>

  <target name="init"
          depends="load-properties, setup-dirs, make, setup-filesets"
          unless="project.initialized">
    <!-- Set property to prevent target from being executed multiple times -->
    <property name="project.initialized" value="true"/>
  </target>

  <target name="load-properties">
    <php function="dirname" returnProperty="phing.dir">
      <param value="${phing.file}"/>
    </php>

    <property name="project.basedir" value="${phing.dir}" />

    <!-- Use condition instead of unless property as we cannot unset properties in Phing -->
    <if>
      <or>
        <!-- `istrue` evaluates to true is value is not set we need to check
             `isset` as well -->
        <not><istrue value="${project.properties.loaded}" /></not>
        <not><isset property="project.properties.loaded" /></not>
      </or>
      <then>
<!-- By default Jenkins runs Phing from the directory containing the build
file.  If this file is located in a subdirectory - e.g. when using Phing Drupal as a submodule - we need to reset the project basedir and reload properties.

NB: This only works if the subdirectory is directly within the Drupal
root directory. -->
        <if>
          <!-- If `build.properties` exists then assume we have a
               project root directory -->
          <available file="${project.basedir}/../build.properties"/>
          <then>
            <resolvepath propertyName="project.basedir"
                         file="${project.basedir}/../"/>
          </then>
        </if>

        <!-- By default use default properties file
             `build.default.properties` -->
        <property name="project.properties.file"
                  value="${phing.dir}/build.default.properties" />
        <!-- Load the default properties.
             Override in case `load-properties` are called multiple times. -->
        <property file="${project.properties.file}" override="true" />

        <!-- Allow override using `build.properties` in build file
             directory -->
        <available file="${phing.dir}/build.properties"
                   property="project.properties.file"
                   value="${phing.dir}/build.properties" />
        <!-- Allow override using `build.properties` in project base
             directory -->
        <available file="${project.basedir}/build.properties"
                   property="project.properties.file"
                   value="${project.basedir}/build.properties" />

        <!-- Load the overriding properties. -->
        <property file="${project.properties.file}" override="true" />

        <!-- Set property to prevent unnecessary additional invocations of this target -->
        <property name="project.properties.loaded" value="true" />
      </then>
    </if>
  </target>

  <target name="setup-dirs"
          depends="load-properties">
    <if>
      <isset property="drupal.make.dir"/>
      <then>
        <property name="project.drupal.dir"
                value="${project.basedir}/${drupal.make.dir}" />
      </then>
      <else>
        <property name="project.drupal.dir"
                value="${project.basedir}" />
      </else>
    </if>

    <property name="project.sitesdir"
              value="${project.drupal.dir}/${project.code.dir}" />
    <property name="project.builddir"
              value="${project.basedir}/build" />
    <property name="project.localsrcdir"
              value="${project.builddir}/local-resources" />
    <property name="project.logdir"
              value="${project.builddir}/logs" />
    <property name="project.testdir"
              value="${project.builddir}/tests" />
  </target>

  <target name="make"
          depends="load-properties"
          if="drupal.make.file">
    <if>
      <or>
        <not><isset property="project.make.skip"/></not>
        <not><istrue value="${project.make.skip}"/></not>
      </or>
      <then>
        <!-- Delete any prexisting builds -->
        <delete dir="${project.drupal.dir}"/>

        <!-- If the make file does not include a core Drupal project we need
             to download one separately. This should be defined in
             `build.properties`. -->
        <if>
          <and>
            <isset property="drupal.make.nocore"/>
            <istrue value="${drupal.make.nocore}"/>
          </and>
          <then>
            <!-- Download the appropriate version of Drupal -->
            <drush command="dl" assume="yes">
              <param>drupal-${drupal.version}</param>
              <option name="drupal-project-rename">${drupal.make.dir}</option>
            </drush>

            <!-- Make the project in the project code directory. If using
                 a directory inside the `sites` folder modules can be tested
                 faster and easier when using the minimal profile. -->
            <drush command="make" assume="yes">
              <param>${drupal.make.file}</param>
              <option name="contrib-destination">${drupal.make.dir}/${project.code.dir}</option>
              <option name="no-core"/>
            </drush>

            <!-- Copy the install profile bundled with the make file to the
                 appropriate directory. -->
            <copy todir="${project.drupal.dir}/profiles/${drupal.profile}/">
              <fileset dir="${project.basedir}">
                <include name="${drupal.profile}.*" />
              </fileset>
            </copy>
          </then>
          <else>
            <drush command="make" assume="yes">
              <param>${drupal.make.file}</param>
              <param>${drupal.make.dir}</param>
            </drush>
          </else>
        </if>

        <if>
          <isset property="drupal.make.rewritebase" />
          <then>
            <reflexive file="${project.drupal.dir}/.htaccess">
              <filterchain>
                <replaceregexp>
                  <regexp pattern="# RewriteBase [\w/]*" replace="RewriteBase ${drupal.make.rewritebase}"/>
                </replaceregexp>
              </filterchain>
            </reflexive>
          </then>
        </if>

        <!-- Set property to prevent target from being executed multiple times -->
        <property name="project.make.skip" value="true"/>
      </then>
      <else>
        <echo>
          Skipping drush make.${line.separator}
          drupal.make.skip has been set to ${project.make.skip}.
        </echo>
      </else>
    </if>
  </target>

  <target name="setup-filesets"
          depends="load-properties">
    <!-- Define pattern sets for future reference -->

    <!-- PHP files -->
    <patternset id="php">
      <include name="**/*.php" />
      <include name="**/*.module" />
      <include name="**/*.install" />
      <include name="**/*.inc" />
      <include name="**/*.profile" />
      <include name="**/*.test" />
    </patternset>

    <!-- Javascript files -->
    <patternset id="js">
      <include name="**/custom/**/*.js" />
      <!-- Minimized JavaScript files should not be analyzed.
           In their optimized state they can not be expexted
           to conform to coding standards. -->
      <exclude name="**/*.min.js" />
    </patternset>

    <!-- CSS files -->
    <patternset id="css">
      <include name="**/*.css" />
    </patternset>

    <!-- Directories for community contributed code. We exclude these from
         code analysis as we cannot be held responsible for any problems
         here. -->
    <patternset id="contrib">
      <exclude name="**/contrib/**/*.*" />
      <exclude name="**/libraries/**/*.*" />
    </patternset>

    <patternset id="vendor">
        <exclude name="**/vendor/**/*.*" />
    </patternset>

    <!-- We exclude generated files from We exclude these from code analysis
         as we cannot be held responsible for any problems here. -->
    <patternset id="generated">
      <exclude name="**/*.features.*" />
      <exclude name="**/*.field_group.inc" />
      <exclude name="**/*.layouts.inc" />
      <exclude name="**/*.pages_default.inc" />
      <exclude name="**/*.panels_default.inc" />
      <exclude name="**/*.strongarm.inc" />
      <exclude name="**/*.views_default.inc" />
    </patternset>

    <!-- Define file sets for future reference -->

    <!-- All PHP files -->
    <fileset id="src.php" dir="${project.drupal.dir}">
      <patternset refid="php"/>
    </fileset>

    <!-- Custom PHP files -->
    <fileset id="src.php.custom" dir="${project.sitesdir}">
      <patternset refid="php"/>
      <patternset refid="contrib"/>
      <patternset refid="generated"/>
      <patternset refid="vendor" />
    </fileset>

    <!-- All Javascript files -->
    <fileset id="src.js" dir="${project.drupal.dir}">
      <patternset refid="js" />
    </fileset>

    <!-- Custom Javascript files -->
    <fileset id="src.js.custom" dir="${project.sitesdir}">
      <patternset refid="js" />
      <patternset refid="contrib" />
      <patternset refid="vendor" />
    </fileset>

    <!-- All CSS files -->
    <fileset id="src.css" dir="${project.basedir}">
      <patternset refid="css" />
    </fileset>

    <!-- Custom CSS files -->
    <fileset id="src.css.custom" dir="${project.sitesdir}">
      <patternset refid="css" />
      <patternset refid="vendor" />
      <patternset refid="contrib" />
    </fileset>

  </target>

<!-- ### Clean working environment  -->
  <target name="clean"
          description="Clean up and create artifact directories"
          depends="setup-dirs"
          unless="project.cleaned">
    <!-- Delete any existing artifacts from a previous build.
         Do not delete builddir. It may contain the build file! -->
    <delete dir="${project.logdir}"/>
    <delete dir="${project.testdir}"/>
    <!-- Verbose. We need to make sure any database is deleted. Reinstalling
         the site with an existing database causes the build to fail. -->
    <delete file="${project.drupal.dir}/database.sqlite" verbose="true" />
    <!-- Remove leftover Drupal simpletest databases -->
    <delete>
      <fileset dir="${project.basedir}">
        <include name="database.sqlite-simpletest*"/>
      </fileset>
    </delete>

    <!-- Recreate directories for artifacts -->
    <mkdir dir="${project.logdir}"/>
    <mkdir dir="${project.testdir}"/>

    <!-- Set property to prevent target from being executed multiple times -->
    <property name="project.cleaned" value="true"/>
  </target>

  <target name="site-install"
          depends="init"
          unless="project.installed">
    <drush command="site-install" assume="yes">
      <option name="db-url">${drupal.db.url}</option>
      <param>${drupal.profile}</param>
    </drush>
    <!-- Fix permissions for the default site directory and settings. The
         owner must be able to delete the directories during subsequent
         builds. -->
    <chmod file="${project.drupal.dir}/sites/default/"
           mode="0755" failonerror="true"/>
    <chmod file="${project.drupal.dir}/sites/default/default.settings.php"
           mode="0755" failonerror="true"/>

    <!-- Set property to prevent target from being executed multiple times -->
    <property name="project.installed" value="true"/>
  </target>

  <!-- ### Download and enable a project/module -->
  <target name="enable-module">
    <!-- If project is not set then we assume that the module name is also
         the project name. -->
    <property name="project" value="${module}" override="no"/>

    <!-- If the module is not already available then download it -->
    <drush command="pm-list" returnProperty="modules.available"/>
    <php function="strpos" returnProperty="module.available">
      <param>${modules.available}</param>
      <param>${module}</param>
    </php>
    <if>
      <not><istrue value="${module.available}"/></not>
      <then>
        <!-- Download specific version if specified -->
        <condition property="download" value="${project}-${project.version}">
          <isset property="project.version"/>
        </condition>
        <property name="download" value="${project}" override="false"/>

        <drush command="pm-download" assume="yes">
          <param>${download}</param>
        </drush>
      </then>
    </if>

    <!-- Enable the module -->
    <drush command="pm-enable" assume="yes">
      <param>${module}</param>
    </drush>
  </target>


</project>
